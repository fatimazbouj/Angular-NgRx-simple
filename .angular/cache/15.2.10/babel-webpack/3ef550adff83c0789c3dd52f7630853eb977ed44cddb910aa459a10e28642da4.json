{"ast":null,"code":"import { createEffect, ofType } from \"@ngrx/effects\";\nimport * as fromUsers from './index';\nimport { map, switchMap } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../services/user.service\";\nexport class UsersEffects {\n  constructor(actions$, UserService) {\n    this.actions$ = actions$;\n    this.UserService = UserService;\n    //get users\n    this.getUsers$ = createEffect(() => this.actions$.pipe(ofType(fromUsers.getUsers.type), switchMap(() => this.UserService.getUsers()), map(users => fromUsers.getUsersSuccess({\n      users\n    }))));\n    //create users\n    this.createUser$ = createEffect(() => this.actions$.pipe(ofType(fromUsers.createUsers.type), switchMap(({\n      user\n    }) => this.UserService.addUser(user)), map(user => fromUsers.createUserSuccess({\n      user\n    }))));\n    //update users\n    this.updateUser$ = createEffect(() => this.actions$.pipe(ofType(fromUsers.updateUser.type), switchMap(({\n      user\n    }) => this.UserService.undateUser(user)), map(user => fromUsers.updateUserSuccess({\n      user\n    }))));\n    //delete user\n    this.deleteUser$ = createEffect(() => this.actions$.pipe(ofType(fromUsers.deleteUser.type), switchMap(({\n      user\n    }) => this.UserService.deleteUser(user)), map(user => fromUsers.deleteUserSuccess({\n      user\n    }))));\n  }\n  static #_ = this.ɵfac = function UsersEffects_Factory(t) {\n    return new (t || UsersEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.UserService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UsersEffects,\n    factory: UsersEffects.ɵfac\n  });\n}","map":{"version":3,"mappings":"AACA,SAAkBA,YAAY,EAAEC,MAAM,QAAQ,eAAe;AAE7D,OAAO,KAAKC,SAAS,MAAM,SAAS;AACpC,SAASC,GAAG,EAAEC,SAAS,QAAQ,MAAM;;;;AAIrC,OAAM,MAAOC,YAAY;EAEvBC,YAA6BC,QAAgB,EAAkBC,WAAuB;IAAzD,aAAQ,GAARD,QAAQ;IAA0B,gBAAW,GAAXC,WAAW;IAE1E;IACA,cAAS,GAACR,YAAY,CAAC,MACrB,IAAI,CAACO,QAAQ,CAACE,IAAI,CAChBR,MAAM,CAACC,SAAS,CAACQ,QAAQ,CAACC,IAAI,CAAC,EAC/BP,SAAS,CAAC,MAAI,IAAI,CAACI,WAAW,CAACE,QAAQ,EAAE,CAAC,EAC1CP,GAAG,CAAES,KAAa,IAAGV,SAAS,CAACW,eAAe,CAAC;MAACD;IAAK,CAAC,CAAC,CAAC,CACzD,CACF;IAED;IAEA,gBAAW,GAACZ,YAAY,CAAC,MACrB,IAAI,CAACO,QAAQ,CAACE,IAAI,CAChBR,MAAM,CAACC,SAAS,CAACY,WAAW,CAACH,IAAI,CAAC,EAClCP,SAAS,CAAC,CAAC;MAACW;IAAI,CAAC,KAAG,IAAI,CAACP,WAAW,CAACQ,OAAO,CAACD,IAAI,CAAC,CAAE,EACpDZ,GAAG,CAAEY,IAAU,IAAGb,SAAS,CAACe,iBAAiB,CAAC;MAACF;IAAI,CAAC,CAAC,CAAC,CACvD,CACJ;IAED;IAEA,gBAAW,GAACf,YAAY,CAAC,MACnB,IAAI,CAACO,QAAQ,CAACE,IAAI,CAChBR,MAAM,CAACC,SAAS,CAACgB,UAAU,CAACP,IAAI,CAAC,EACjCP,SAAS,CAAC,CAAC;MAACW;IAAI,CAAC,KAAG,IAAI,CAACP,WAAW,CAACW,UAAU,CAACJ,IAAI,CAAC,CAAC,EACtDZ,GAAG,CAAEY,IAAI,IAAGb,SAAS,CAACkB,iBAAiB,CAAC;MAACL;IAAI,CAAC,CAAC,CAAC,CACjD,CACN;IAED;IAEA,gBAAW,GAACf,YAAY,CAAC,MACjB,IAAI,CAACO,QAAQ,CAACE,IAAI,CAChBR,MAAM,CAACC,SAAS,CAACmB,UAAU,CAACV,IAAI,CAAC,EACjCP,SAAS,CAAC,CAAC;MAACW;IAAI,CAAC,KAAG,IAAI,CAACP,WAAW,CAACa,UAAU,CAACN,IAAI,CAAC,CAAC,EACtDZ,GAAG,CAAEY,IAAI,IAAGb,SAAS,CAACoB,iBAAiB,CAAC;MAACP;IAAI,CAAC,CAAC,CAAC,CACjD,CACR;EAvCuF;EAAC;qBAF9EV,YAAY;EAAA;EAAA;WAAZA,YAAY;IAAAkB,SAAZlB,YAAY;EAAA","names":["createEffect","ofType","fromUsers","map","switchMap","UsersEffects","constructor","actions$","UserService","pipe","getUsers","type","users","getUsersSuccess","createUsers","user","addUser","createUserSuccess","updateUser","undateUser","updateUserSuccess","deleteUser","deleteUserSuccess","factory"],"sourceRoot":"","sources":["C:\\Users\\Administrator\\Desktop\\R&D\\angular\\NgRx-simple\\src\\app\\users\\store\\users.effects.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Actions, createEffect, ofType } from \"@ngrx/effects\";\r\nimport { UserService } from \"../services/user.service\";\r\nimport * as fromUsers from './index';\r\nimport { map, switchMap } from \"rxjs\";\r\nimport { IUser } from \"../interfaces/user.interface\";\r\n\r\n@Injectable()\r\nexport class UsersEffects{\r\n\r\n  constructor(private readonly actions$:Actions,private readonly UserService:UserService){}\r\n\r\n  //get users\r\n  getUsers$=createEffect(()=>\r\n    this.actions$.pipe(\r\n      ofType(fromUsers.getUsers.type),\r\n      switchMap(()=>this.UserService.getUsers()),\r\n      map((users:IUser[])=>fromUsers.getUsersSuccess({users}))\r\n    )\r\n  )\r\n\r\n  //create users\r\n\r\n  createUser$=createEffect(()=>\r\n      this.actions$.pipe(\r\n        ofType(fromUsers.createUsers.type),\r\n        switchMap(({user})=>this.UserService.addUser(user) ),\r\n        map((user:IUser)=>fromUsers.createUserSuccess({user}))\r\n      )\r\n  )\r\n\r\n  //update users\r\n\r\n  updateUser$=createEffect(()=>\r\n        this.actions$.pipe(\r\n          ofType(fromUsers.updateUser.type),\r\n          switchMap(({user})=>this.UserService.undateUser(user)),\r\n          map((user)=>fromUsers.updateUserSuccess({user}))\r\n        )\r\n  )\r\n\r\n  //delete user\r\n\r\n  deleteUser$=createEffect(()=>\r\n          this.actions$.pipe(\r\n            ofType(fromUsers.deleteUser.type),\r\n            switchMap(({user})=>this.UserService.deleteUser(user)),\r\n            map((user)=>fromUsers.deleteUserSuccess({user}))\r\n          )\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}